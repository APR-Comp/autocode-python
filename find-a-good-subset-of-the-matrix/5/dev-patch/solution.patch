--- find-a-good-subset-of-the-matrix/5/src/solution.py	2023-11-27 21:36:38.221784852 +0200
+++ find-a-good-subset-of-the-matrix/5/src/..//../reference.py	2023-11-27 23:16:59.058227841 +0200
@@ -1,78 +1,15 @@
-from typing import *
-"""python
- You are given a 0-indexed m x n binary matrix grid.
-Let us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset.
-More formally, if the length of the chosen subset of rows is k, then the sum of each column should be at most floor(k / 2).
-Return an integer array that contains row indices of a good subset sorted in ascending order.
-If there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.
-A subset of rows of the matrix grid is any matrix that can be obtained by deleting some (possibly none or all) rows from grid.
- 
-Example 1:
+from typing import List
 
-Input: grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]
-Output: [0,1]
-Explanation: We can choose the 0 ** th and 1 ** st rows to create a good subset of rows.
-The length of the chosen subset is 2.
-- The sum of the 0 ** th column is 0 + 0 = 0, which is at most half of the length of the subset.
-- The sum of the 1 ** st column is 1 + 0 = 1, which is at most half of the length of the subset.
-- The sum of the 2 ** nd column is 1 + 0 = 1, which is at most half of the length of the subset.
-- The sum of the 3 ** rd column is 0 + 1 = 1, which is at most half of the length of the subset.
 
-Example 2:
-
-Input: grid = [[0]]
-Output: [0]
-Explanation: We can choose the 0 ** th row to create a good subset of rows.
-The length of the chosen subset is 1.
-- The sum of the 0 ** th column is 0, which is at most half of the length of the subset.
-
-Example 3:
-
-Input: grid = [[1,1,1],[1,1,1]]
-Output: []
-Explanation: It is impossible to choose any subset of rows to create a good subset.
-
- 
-Constraints:
-
-m == grid.length
-n == grid[i].length
-1 <= m <= 10 ** 4
-1 <= n <= 5
-grid[i][j] is either 0 or 1.
-
- """
 class Solution:
     def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:
-        m = len(grid)
-        n = len(grid[0])
-        
-        # Check if a subset of rows is good
-        def is_good(rows):
-            # Count the sum of each column in the subset
-            col_sum = [0] * n
-            for row in rows:
-                for j in range(n):
-                    col_sum[j] += grid[row][j]
-            # Check if each column sum is at most half of the subset length
-            for sum_val in col_sum:
-                if sum_val > len(rows) // 2:
-                    return False
-            return True
-        
-        # Generate all subsets of rows using backtracking
-        def generate_subsets(rows, start):
-            # Base case: check if the current subset is good
-            if is_good(rows):
-                return rows
-            # Recursive case: generate subsets by adding the next row
-            for i in range(start, m):
-                rows.append(i)
-                subset = generate_subsets(rows, i+1)
-                if subset:
-                    return subset
-                rows.pop()
-            return []
-        
-        # Start with an empty subset and generate subsets
-        return generate_subsets([], 0)
+        if len(grid) == 1:
+            return [0] if all(num == 0 for num in grid[0]) else []
+        d = {}
+        for r, row in enumerate(grid):
+            num = sum(cell << c for c, cell in enumerate(row))
+            for i in range(32):
+                if (i & num) == 0 and i in d:
+                    return [d[i], r]
+            d.setdefault(num, r)    
+        return []
\ No newline at end of file
