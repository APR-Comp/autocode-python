--- difference-of-number-of-distinct-values-on-diagonals/5/src/solution.py	2023-11-27 21:36:38.198451286 +0200
+++ difference-of-number-of-distinct-values-on-diagonals/5/src/..//../reference.py	2023-11-27 23:16:59.034894279 +0200
@@ -1,60 +1,24 @@
-from typing import *
-"""python
- Given a 0-indexed 2D grid of size m x n, you should find the matrix answer of size m x n.
-The value of each cell (r, c) of the matrix answer is calculated in the following way:
+from collections import defaultdict
+from itertools import product
+from typing import List
 
-Let topLeft[r][c] be the number of distinct values in the top-left diagonal of the cell (r, c) in the matrix grid.
-Let bottomRight[r][c] be the number of distinct values in the bottom-right diagonal of the cell (r, c) in the matrix grid.
 
-Then answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|.
-Return the matrix answer.
-A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end.
-A cell (r1, c1) belongs to the top-left diagonal of the cell (r, c), if both belong to the same diagonal and r1 < r. Similarly is defined bottom-right diagonal.
- 
-Example 1:
-
-
-
-Input: grid = [[1,2,3],[3,1,5],[3,2,1]]
-Output: [[1,1,0],[1,0,1],[0,1,1]]
-Explanation: The 1 ** st diagram denotes the initial grid. 
-The 2 ** nd diagram denotes a grid for cell (0,0), where blue-colored cells are cells on its bottom-right diagonal.
-The 3 ** rd diagram denotes a grid for cell (1,2), where red-colored cells are cells on its top-left diagonal.
-The 4 ** th diagram denotes a grid for cell (1,1), where blue-colored cells are cells on its bottom-right diagonal and red-colored cells are cells on its top-left diagonal.
-- The cell (0,0) contains [1,1] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |1 - 0| = 1.
-- The cell (1,2) contains [] on its bottom-right diagonal and [2] on its top-left diagonal. The answer is |0 - 1| = 1.
-- The cell (1,1) contains [1] on its bottom-right diagonal and [1] on its top-left diagonal. The answer is |1 - 1| = 0.
-The answers of other cells are similarly calculated.
-
-Example 2:
-
-Input: grid = [[1]]
-Output: [[0]]
-Explanation: - The cell (0,0) contains [] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |0 - 0| = 0.
-
- 
-Constraints:
-
-m == grid.length
-n == grid[i].length
-1 <= m, n, grid[i][j] <= 50
-
- """
 class Solution:
     def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:
-        from typing import List
 
-class Solution:
-    def differenceOfDistinctValues(self, grid: List[List[int]]) -> List[List[int]]:
-        m, n = len(grid), len(grid[0])
-        topLeft = [[set() for _ in range(n)] for _ in range(m)]
-        bottomRight = [[set() for _ in range(n)] for _ in range(m)]
-        answer = [[0] * n for _ in range(m)]
-        
-        for i in range(m):
-            for j in range(n):
-                topLeft[i][j] = set(grid[x][y] for x in range(i) for y in range(j) if x < i and y < j)
-                bottomRight[i][j] = set(grid[x][y] for x in range(i+1, m) for y in range(j+1, n) if x > i and y > j)
-                answer[i][j] = abs(len(topLeft[i][j]) - len(bottomRight[i][j]))
-        
-        return answer
+        d = defaultdict(list)                      
+
+        for i, j in product(range(len(grid)),        
+                            range(len(grid[0]))):
+            d[i-j].append((i,j))                        # <-- Construct dict of diagonals; i - j
+                                                        #     remains constant on a '\' diag. 
+        for diag in d:
+            arr = [grid[i][j] for i,j in d[diag]]       # <-- Construct an arr of the elements
+                                                        #     on the diagonal.
+
+            for idx, (i,j) in enumerate(d[diag]):       # <-- Overwrite each element in the diagonal.   
+                grid[i][j] = abs(len(set(arr[:idx])) -  #     in the array with its score.
+                                 len(set(arr[idx+1:])))
+            
+        return grid                                     # <-- Return the overwritten 'grid' as the
+                                                        #     'answer' matrix.
\ No newline at end of file
