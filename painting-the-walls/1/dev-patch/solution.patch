--- painting-the-walls/1/src/solution.py	2023-11-27 21:36:38.438453682 +0200
+++ painting-the-walls/1/src/..//../reference.py	2023-11-27 23:16:59.564899479 +0200
@@ -1,47 +1,32 @@
-from typing import *
-"""python
- You are given two 0-indexed integer arrays, cost and time, of size n representing the costs and the time taken to paint n different walls respectively. There are two painters available:
+from typing import List
 
-A paid painter that paints the i ** th wall in time[i] units of time and takes cost[i] units of money.
-A free painter that paints any wall in 1 unit of time at a cost of 0. But the free painter can only be used if the paid painter is already occupied.
 
-Return the minimum amount of money required to paint the n walls.
- 
-Example 1:
-
-Input: cost = [1,2,3,2], time = [1,2,3,2]
-Output: 3
-Explanation: The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.
-
-Example 2:
-
-Input: cost = [2,3,4,2], time = [1,1,1,1]
-Output: 4
-Explanation: The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.
+class Solution:
+    def paintWalls(self, cost: List[int], time: List[int]) -> int:
+        postfix_times = time.copy()
 
- 
-Constraints:
+        for i in range(len(postfix_times) - 2, -1, -1):
+            postfix_times[i] += postfix_times[i +1]
 
-1 <= cost.length <= 500
-cost.length == time.length
-1 <= cost[i] <= 10 ** 6
-1 <= time[i] <= 500
+        visited = {}
 
- """
-class Solution:
-    def paintWalls(self, cost: List[int], time: List[int]) -> int:
-        n = len(cost)
-        walls = [(cost[i], time[i]) for i in range(n)]
-        # Sort the walls by time taken to paint in descending order, if tie, sort by cost
-        walls.sort(key=lambda x: (-x[1], x[0]))
+        def dp(index, time_painted):
+            if index == len(cost):
+                return 0 if time_painted >= 0 else float("inf")
+
+            if time_painted >= len(cost) - index:
+                return 0
+
+            if time_painted + postfix_times[index] < 0:
+                return float("inf")
+
+            if (index, time_painted) in visited:
+                return visited[(index, time_painted)]
+            
+            visited[(index, time_painted)] = min(
+                dp(index + 1, time_painted - 1),
+                cost[index] + dp(index + 1,
+                time_painted + time[index]))
+            return visited[(index, time_painted)]
         
-        total_cost = 0
-        total_time = 0
-        # The paid painter starts painting from the wall that takes the longest time
-        for i in range(n):
-            # if the time taken by the paid painter is more than the total time so far,
-            # the free painter can paint some walls while the paid painter is painting
-            if walls[i][1] > total_time:
-                total_cost += walls[i][0]
-                total_time += 1
-        return total_cost
+        return dp(0, 0)
\ No newline at end of file
