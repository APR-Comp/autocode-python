--- maximum-strength-of-a-group/1/src/solution.py	2023-11-27 21:36:38.328452584 +0200
+++ maximum-strength-of-a-group/1/src/..//../reference.py	2023-11-27 23:16:59.244896340 +0200
@@ -1,31 +1,39 @@
-from typing import *
-"""python
- You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​].
-Return the maximum strength of a group the teacher can create.
- 
-Example 1:
-
-Input: nums = [3,-1,-5,2,5,-9]
-Output: 1350
-Explanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.
-
-Example 2:
-
-Input: nums = [-4,-5,-4]
-Output: 20
-Explanation: Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.
+from math import prod
+from typing import List
 
- 
-Constraints:
 
-1 <= nums.length <= 13
--9 <= nums[i] <= 9
-
- """
 class Solution:
     def maxStrength(self, nums: List[int]) -> int:
-        n = len(nums)
-        maxStrength = [0]*(1<<n)
-        for mask in range(1, 1<<n):
-            maxStrength[mask] = max(nums[i]*maxStrength[mask^(1<<i)] for i in range(n) if mask&(1<<i))
-        return maxStrength[-1]
+        contains_zero = False
+        positive = []
+        negative = []
+
+        for num in nums:
+            if num > 0:
+                positive.append(num)
+            elif num < 0:
+                negative.append(num)
+            else:
+                contains_zero = True
+
+        # If the product of negative numbers is negative
+        if len(negative) & 1:
+            # If there is more than one negative number,
+            # then their product can be positive.
+            if len(negative) > 1:
+                negative.remove(max(negative))
+            # If not, then the product of positive numbers is sufficient
+            elif positive:
+                return prod(positive)
+            # If not again, then zero is greater than negative numbers.
+            elif contains_zero:
+                return 0
+            # If again not, then return the maximum among the negative
+            else:
+                return max(negative)
+
+        # Consists of zeros only
+        if not (negative or positive):
+            return 0
+
+        return prod(negative) * prod(positive)
\ No newline at end of file
