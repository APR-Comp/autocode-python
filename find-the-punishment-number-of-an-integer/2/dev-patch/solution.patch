--- find-the-punishment-number-of-an-integer/2/src/solution.py	2023-11-27 21:36:38.251785152 +0200
+++ find-the-punishment-number-of-an-integer/2/src/..//../reference.py	2023-11-27 23:16:59.108228332 +0200
@@ -1,83 +1,24 @@
-from typing import *
-"""python
- Given a positive integer n, return the punishment number of n.
-The punishment number of n is defined as the sum of the squares of all integers i such that:
-
-1 <= i <= n
-The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
-
-Â 
-Example 1:
-
-Input: n = 10
-Output: 182
-Explanation: There are exactly 3 integers i that satisfy the conditions in the statement:
-- 1 since 1 * 1 = 1
-- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.
-- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.
-Hence, the punishment number of 10 is 1 + 81 + 100 = 182
-
-Example 2:
-
-Input: n = 37
-Output: 1478
-Explanation: There are exactly 4 integers i that satisfy the conditions in the statement:
-- 1 since 1 * 1 = 1. 
-- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. 
-- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. 
-- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.
-Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478
-
-Â 
-Constraints:
-
-1 <= n <= 1000
-
- """
 class Solution:
     def punishmentNumber(self, n: int) -> int:
-        def can_split(num, square):
-            # Convert the square and the number to string
-            str_square = str(square)
-            str_num = str(num)
-            
-            # Initialize pointers and the current number string
-            left = 0
-            right = 0
-            curr_str = ""
-            
-            # Traverse the square string
-            while right < len(str_square):
-                # Add the digit at the right pointer to the current number string
-                curr_str += str_square[right]
-                # If the current number string is less than the number string, move the right pointer
-                if curr_str < str_num:
-                    right += 1
-                # If the current number string is equal to the number string, move both pointers and reset the current number string
-                elif curr_str == str_num:
-                    left = right + 1
-                    right = left
-                    curr_str = ""
-                # If the current number string is greater than the number string, return False
-                else:
-                    return False
-            
-            # If the left pointer has reached the end of the square string, return True
-            if left == len(str_square):
-                return True
-            # Else, return False
-            else:
-                return False
-
-        # Initialize the punishment number
-        punishment_num = 0
-        # Iterate over the numbers from 1 to n
-        for num in range(1, n + 1):
-            # Calculate the square of the number
+        def is_punishment_num(num : int) -> bool:
             square = num * num
-            # If the number can be split, add the square to the punishment number
-            if can_split(num, square):
-                punishment_num += square
-
-        # Return the punishment number
-        return punishment_num
+            str_square = str(square)
+            length = len(str_square)
+            for i in range(1 << length):
+                split = []
+                last = 0
+                for j in range(length):
+                    if ((i >> j) & 1) == 1:
+                        split.append(int(str_square[last:j+1]))
+                        last = j+1
+                if last != length:
+                    split.append(int(str_square[last:length]))
+                if sum(split) == num:
+                    return True
+            return False
+
+        punishment_number = 0
+        for i in range(1, n + 1):
+            if is_punishment_num(i):
+                punishment_number += i * i
+        return punishment_number
