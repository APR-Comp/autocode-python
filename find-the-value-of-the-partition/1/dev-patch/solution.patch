--- find-the-value-of-the-partition/1/src/solution.py	2023-11-27 21:36:38.271785352 +0200
+++ find-the-value-of-the-partition/1/src/..//../reference.py	2023-12-19 10:47:17.241319796 +0200
@@ -1,53 +1,20 @@
 from typing import *
-"""python
- You are given a positive integer array nums.
-Partition nums into two arrays, nums1 and nums2, such that:
-
-Each element of the array nums belongs to either the array nums1 or the array nums2.
-Both arrays are non-empty.
-The value of the partition is minimized.
-
-The value of the partition is |max(nums1) - min(nums2)|.
-Here, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.
-Return the integer denoting the value of such partition.
- 
-Example 1:
-
-Input: nums = [1,3,2,4]
-Output: 1
-Explanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].
-- The maximum element of the array nums1 is equal to 2.
-- The minimum element of the array nums2 is equal to 3.
-The value of the partition is |2 - 3| = 1. 
-It can be proven that 1 is the minimum value out of all partitions.
-
-Example 2:
-
-Input: nums = [100,1,10]
-Output: 9
-Explanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1].
-- The maximum element of the array nums1 is equal to 10.
-- The minimum element of the array nums2 is equal to 1.
-The value of the partition is |10 - 1| = 9.
-It can be proven that 9 is the minimum value out of all partitions.
-
- 
-Constraints:
-
-2 <= nums.length <= 10 ** 5
-1 <= nums[i] <= 10 ** 9
-
- """
 class Solution:
     def findValueOfPartition(self, nums: List[int]) -> int:
+                # Sort the given array
         nums.sort()
-        n = len(nums)
-        prefix = [0] * (n + 1)
-        for i in range(n):
-            prefix[i + 1] = prefix[i] + nums[i]
-        res = float('inf')
-        for i in range(1, n):
-            max1 = prefix[i]
-            min2 = prefix[n] - prefix[i]
-            res = min(res, abs(max1 - min2))
-        return res
+        
+        # Initialize the minimum partition value to be the maximum integer
+        min_partition = float('inf')
+        
+        # Loop through the array from the second element to the last
+        for i in range(1, len(nums)):
+            
+            # Calculate the absolute difference between the current element and the previous one
+            partition = abs(nums[i] - nums[i-1])
+            
+            # If this partition value is smaller than the current minimum, update the minimum
+            if partition < min_partition:
+                min_partition = partition
+                
+        return min_partition
